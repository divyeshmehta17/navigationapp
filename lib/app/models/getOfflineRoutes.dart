///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class GetOfflineRoutesDataResultsInstructionsRoutesOverviewPolyline {
/*
{
  "points": "snmtBcgu{L~DTrGd@zHp@hJrAdBDhBLbKrAvD`@|D\\vEVt@Bb@@I\\GVMN_@ZqEbCk@ZFLq@^o@\\WRKF@HCPIJKBMAEAIMAG@OJODCSwEC}@Ae@FkAkC[y@GeC]kFo@cBK?l@GbAa@pB[xAEFSLKb@Ej@Cp@A^Dl@Hb@UB}CRkDPaANkBFaB@eCNI@AKXEvG]fDKzEWp@MGmA@u@JoAt@wDNcABs@CiAOgAWeAIWUYOAA?MA[Ke@KgCOKESMO]Ee@sALaA?QCs@IyAG}Ew@uAOs@EeCGmBIkAKe@Ii@QUI}FyCOKJOtDnBbAl@\\Lh@R`@FnAJ|@D"
}
*/

  String? points;

  GetOfflineRoutesDataResultsInstructionsRoutesOverviewPolyline({
    this.points,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesOverviewPolyline.fromJson(
      Map<String, dynamic> json) {
    points = json['points']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['points'] = points;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsStartLocation {
/*
{
  "lat": 19.2434557,
  "lng": 72.8588959
}
*/

  double? lat;
  double? lng;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsStartLocation({
    this.lat,
    this.lng,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsStartLocation.fromJson(
      Map<String, dynamic> json) {
    lat = json['lat']?.toDouble();
    lng = json['lng']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['lat'] = lat;
    data['lng'] = lng;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsPolyline {
/*
{
  "points": "snmtBcgu{L@?"
}
*/

  String? points;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsPolyline({
    this.points,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsPolyline.fromJson(
      Map<String, dynamic> json) {
    points = json['points']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['points'] = points;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsEndLocation {
/*
{
  "lat": 19.2434515,
  "lng": 72.8588954
}
*/

  double? lat;
  double? lng;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsEndLocation({
    this.lat,
    this.lng,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsEndLocation.fromJson(
      Map<String, dynamic> json) {
    lat = json['lat']?.toDouble();
    lng = json['lng']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['lat'] = lat;
    data['lng'] = lng;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDuration {
/*
{
  "text": "1 min",
  "value": 0
}
*/

  String? text;
  int? value;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDuration({
    this.text,
    this.value,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDuration.fromJson(
      Map<String, dynamic> json) {
    text = json['text']?.toString();
    value = json['value']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['text'] = text;
    data['value'] = value;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDistance {
/*
{
  "text": "1 m",
  "value": 0
}
*/

  String? text;
  int? value;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDistance({
    this.text,
    this.value,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDistance.fromJson(
      Map<String, dynamic> json) {
    text = json['text']?.toString();
    value = json['value']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['text'] = text;
    data['value'] = value;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsSteps {
/*
{
  "distance": {
    "text": "1 m",
    "value": 0
  },
  "duration": {
    "text": "1 min",
    "value": 0
  },
  "end_location": {
    "lat": 19.2434515,
    "lng": 72.8588954
  },
  "html_instructions": "Head <b>south</b> on <b>Jaywant Sawant Marg</b>",
  "polyline": {
    "points": "snmtBcgu{L@?"
  },
  "start_location": {
    "lat": 19.2434557,
    "lng": 72.8588959
  },
  "travel_mode": "DRIVING"
}
*/

  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDistance? distance;
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDuration? duration;
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsEndLocation?
      endLocation;
  String? htmlInstructions;
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsPolyline? polyline;
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsStartLocation?
      startLocation;
  String? travelMode;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsSteps({
    this.distance,
    this.duration,
    this.endLocation,
    this.htmlInstructions,
    this.polyline,
    this.startLocation,
    this.travelMode,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsSteps.fromJson(
      Map<String, dynamic> json) {
    distance = (json['distance'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDistance
            .fromJson(json['distance'])
        : null;
    duration = (json['duration'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsDuration
            .fromJson(json['duration'])
        : null;
    endLocation = (json['end_location'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsEndLocation
            .fromJson(json['end_location'])
        : null;
    htmlInstructions = json['html_instructions']?.toString();
    polyline = (json['polyline'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsPolyline
            .fromJson(json['polyline'])
        : null;
    startLocation = (json['start_location'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesLegsStepsStartLocation
            .fromJson(json['start_location'])
        : null;
    travelMode = json['travel_mode']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (distance != null) {
      data['distance'] = distance!.toJson();
    }
    if (duration != null) {
      data['duration'] = duration!.toJson();
    }
    if (endLocation != null) {
      data['end_location'] = endLocation!.toJson();
    }
    data['html_instructions'] = htmlInstructions;
    if (polyline != null) {
      data['polyline'] = polyline!.toJson();
    }
    if (startLocation != null) {
      data['start_location'] = startLocation!.toJson();
    }
    data['travel_mode'] = travelMode;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsStartLocation {
/*
{
  "lat": 19.2434557,
  "lng": 72.8588959
}
*/

  double? lat;
  double? lng;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsStartLocation({
    this.lat,
    this.lng,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStartLocation.fromJson(
      Map<String, dynamic> json) {
    lat = json['lat']?.toDouble();
    lng = json['lng']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['lat'] = lat;
    data['lng'] = lng;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsEndLocation {
/*
{
  "lat": 19.2434515,
  "lng": 72.8588954
}
*/

  double? lat;
  double? lng;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsEndLocation({
    this.lat,
    this.lng,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsEndLocation.fromJson(
      Map<String, dynamic> json) {
    lat = json['lat']?.toDouble();
    lng = json['lng']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['lat'] = lat;
    data['lng'] = lng;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsDuration {
/*
{
  "text": "1 min",
  "value": 0
}
*/

  String? text;
  int? value;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsDuration({
    this.text,
    this.value,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsDuration.fromJson(
      Map<String, dynamic> json) {
    text = json['text']?.toString();
    value = json['value']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['text'] = text;
    data['value'] = value;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegsDistance {
/*
{
  "text": "1 m",
  "value": 0
}
*/

  String? text;
  int? value;

  GetOfflineRoutesDataResultsInstructionsRoutesLegsDistance({
    this.text,
    this.value,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegsDistance.fromJson(
      Map<String, dynamic> json) {
    text = json['text']?.toString();
    value = json['value']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['text'] = text;
    data['value'] = value;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesLegs {
/*
{
  "distance": {
    "text": "1 m",
    "value": 0
  },
  "duration": {
    "text": "1 min",
    "value": 0
  },
  "end_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
  "end_location": {
    "lat": 19.2434515,
    "lng": 72.8588954
  },
  "start_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
  "start_location": {
    "lat": 19.2434557,
    "lng": 72.8588959
  },
  "steps": [
    {
      "distance": {
        "text": "1 m",
        "value": 0
      },
      "duration": {
        "text": "1 min",
        "value": 0
      },
      "end_location": {
        "lat": 19.2434515,
        "lng": 72.8588954
      },
      "html_instructions": "Head <b>south</b> on <b>Jaywant Sawant Marg</b>",
      "polyline": {
        "points": "snmtBcgu{L@?"
      },
      "start_location": {
        "lat": 19.2434557,
        "lng": 72.8588959
      },
      "travel_mode": "DRIVING"
    }
  ],
  "traffic_speed_entry": [
    null
  ],
  "via_waypoint": [
    null
  ]
}
*/

  GetOfflineRoutesDataResultsInstructionsRoutesLegsDistance? distance;
  GetOfflineRoutesDataResultsInstructionsRoutesLegsDuration? duration;
  String? endAddress;
  GetOfflineRoutesDataResultsInstructionsRoutesLegsEndLocation? endLocation;
  String? startAddress;
  GetOfflineRoutesDataResultsInstructionsRoutesLegsStartLocation? startLocation;
  List<GetOfflineRoutesDataResultsInstructionsRoutesLegsSteps?>? steps;
  //List<GetOfflineRoutesDataResultsInstructionsRoutesLegsTrafficSpeedEntry?>? trafficSpeedEntry;
  //List<GetOfflineRoutesDataResultsInstructionsRoutesLegsViaWaypoint?>? viaWaypoint;

  GetOfflineRoutesDataResultsInstructionsRoutesLegs({
    this.distance,
    this.duration,
    this.endAddress,
    this.endLocation,
    this.startAddress,
    this.startLocation,
    this.steps,
    //this.trafficSpeedEntry,
    //this.viaWaypoint,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesLegs.fromJson(
      Map<String, dynamic> json) {
    distance = (json['distance'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesLegsDistance.fromJson(
            json['distance'])
        : null;
    duration = (json['duration'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesLegsDuration.fromJson(
            json['duration'])
        : null;
    endAddress = json['end_address']?.toString();
    endLocation = (json['end_location'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesLegsEndLocation.fromJson(
            json['end_location'])
        : null;
    startAddress = json['start_address']?.toString();
    startLocation = (json['start_location'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesLegsStartLocation
            .fromJson(json['start_location'])
        : null;
    if (json['steps'] != null) {
      final v = json['steps'];
      final arr0 = <GetOfflineRoutesDataResultsInstructionsRoutesLegsSteps>[];
      v.forEach((v) {
        arr0.add(
            GetOfflineRoutesDataResultsInstructionsRoutesLegsSteps.fromJson(v));
      });
      steps = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (distance != null) {
      data['distance'] = distance!.toJson();
    }
    if (duration != null) {
      data['duration'] = duration!.toJson();
    }
    data['end_address'] = endAddress;
    if (endLocation != null) {
      data['end_location'] = endLocation!.toJson();
    }
    data['start_address'] = startAddress;
    if (startLocation != null) {
      data['start_location'] = startLocation!.toJson();
    }
    if (steps != null) {
      final v = steps;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['steps'] = arr0;
    }

    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesBoundsSouthwest {
/*
{
  "lat": 19.2313543,
  "lng": 72.8544617
}
*/

  double? lat;
  double? lng;

  GetOfflineRoutesDataResultsInstructionsRoutesBoundsSouthwest({
    this.lat,
    this.lng,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesBoundsSouthwest.fromJson(
      Map<String, dynamic> json) {
    lat = json['lat']?.toDouble();
    lng = json['lng']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['lat'] = lat;
    data['lng'] = lng;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesBoundsNortheast {
/*
{
  "lat": 19.246059,
  "lng": 72.8612021
}
*/

  double? lat;
  double? lng;

  GetOfflineRoutesDataResultsInstructionsRoutesBoundsNortheast({
    this.lat,
    this.lng,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesBoundsNortheast.fromJson(
      Map<String, dynamic> json) {
    lat = json['lat']?.toDouble();
    lng = json['lng']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['lat'] = lat;
    data['lng'] = lng;
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutesBounds {
/*
{
  "northeast": {
    "lat": 19.246059,
    "lng": 72.8612021
  },
  "southwest": {
    "lat": 19.2313543,
    "lng": 72.8544617
  }
}
*/

  GetOfflineRoutesDataResultsInstructionsRoutesBoundsNortheast? northeast;
  GetOfflineRoutesDataResultsInstructionsRoutesBoundsSouthwest? southwest;

  GetOfflineRoutesDataResultsInstructionsRoutesBounds({
    this.northeast,
    this.southwest,
  });
  GetOfflineRoutesDataResultsInstructionsRoutesBounds.fromJson(
      Map<String, dynamic> json) {
    northeast = (json['northeast'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesBoundsNortheast.fromJson(
            json['northeast'])
        : null;
    southwest = (json['southwest'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesBoundsSouthwest.fromJson(
            json['southwest'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (northeast != null) {
      data['northeast'] = northeast!.toJson();
    }
    if (southwest != null) {
      data['southwest'] = southwest!.toJson();
    }
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsRoutes {
/*
{
  "bounds": {
    "northeast": {
      "lat": 19.246059,
      "lng": 72.8612021
    },
    "southwest": {
      "lat": 19.2313543,
      "lng": 72.8544617
    }
  },
  "copyrights": "Map data ©2024",
  "legs": [
    {
      "distance": {
        "text": "1 m",
        "value": 0
      },
      "duration": {
        "text": "1 min",
        "value": 0
      },
      "end_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
      "end_location": {
        "lat": 19.2434515,
        "lng": 72.8588954
      },
      "start_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
      "start_location": {
        "lat": 19.2434557,
        "lng": 72.8588959
      },
      "steps": [
        {
          "distance": {
            "text": "1 m",
            "value": 0
          },
          "duration": {
            "text": "1 min",
            "value": 0
          },
          "end_location": {
            "lat": 19.2434515,
            "lng": 72.8588954
          },
          "html_instructions": "Head <b>south</b> on <b>Jaywant Sawant Marg</b>",
          "polyline": {
            "points": "snmtBcgu{L@?"
          },
          "start_location": {
            "lat": 19.2434557,
            "lng": 72.8588959
          },
          "travel_mode": "DRIVING"
        }
      ],
      "traffic_speed_entry": [
        null
      ],
      "via_waypoint": [
        null
      ]
    }
  ],
  "overview_polyline": {
    "points": "snmtBcgu{L~DTrGd@zHp@hJrAdBDhBLbKrAvD`@|D\\vEVt@Bb@@I\\GVMN_@ZqEbCk@ZFLq@^o@\\WRKF@HCPIJKBMAEAIMAG@OJODCSwEC}@Ae@FkAkC[y@GeC]kFo@cBK?l@GbAa@pB[xAEFSLKb@Ej@Cp@A^Dl@Hb@UB}CRkDPaANkBFaB@eCNI@AKXEvG]fDKzEWp@MGmA@u@JoAt@wDNcABs@CiAOgAWeAIWUYOAA?MA[Ke@KgCOKESMO]Ee@sALaA?QCs@IyAG}Ew@uAOs@EeCGmBIkAKe@Ii@QUI}FyCOKJOtDnBbAl@\\Lh@R`@FnAJ|@D"
  },
  "summary": "Jaywant Sawant Marg",
  "warnings": [
    null
  ],
  "waypoint_order": [
    0
  ]
}
*/

  GetOfflineRoutesDataResultsInstructionsRoutesBounds? bounds;
  String? copyrights;
  List<GetOfflineRoutesDataResultsInstructionsRoutesLegs?>? legs;
  GetOfflineRoutesDataResultsInstructionsRoutesOverviewPolyline?
      overviewPolyline;
  String? summary;
  //List<GetOfflineRoutesDataResultsInstructionsRoutesWarnings?>? warnings;
  List<int?>? waypointOrder;

  GetOfflineRoutesDataResultsInstructionsRoutes({
    this.bounds,
    this.copyrights,
    this.legs,
    this.overviewPolyline,
    this.summary,
    //  this.warnings,
    this.waypointOrder,
  });
  GetOfflineRoutesDataResultsInstructionsRoutes.fromJson(
      Map<String, dynamic> json) {
    bounds = (json['bounds'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesBounds.fromJson(
            json['bounds'])
        : null;
    copyrights = json['copyrights']?.toString();
    if (json['legs'] != null) {
      final v = json['legs'];
      final arr0 = <GetOfflineRoutesDataResultsInstructionsRoutesLegs>[];
      v.forEach((v) {
        arr0.add(GetOfflineRoutesDataResultsInstructionsRoutesLegs.fromJson(v));
      });
      legs = arr0;
    }
    overviewPolyline = (json['overview_polyline'] != null)
        ? GetOfflineRoutesDataResultsInstructionsRoutesOverviewPolyline
            .fromJson(json['overview_polyline'])
        : null;
    summary = json['summary']?.toString();

    if (json['waypoint_order'] != null) {
      final v = json['waypoint_order'];
      final arr0 = <int>[];
      v.forEach((v) {
        arr0.add(v.toInt());
      });
      waypointOrder = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (bounds != null) {
      data['bounds'] = bounds!.toJson();
    }
    data['copyrights'] = copyrights;
    if (legs != null) {
      final v = legs;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['legs'] = arr0;
    }
    if (overviewPolyline != null) {
      data['overview_polyline'] = overviewPolyline!.toJson();
    }
    data['summary'] = summary;

    if (waypointOrder != null) {
      final v = waypointOrder;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['waypoint_order'] = arr0;
    }
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructionsGeocodedWaypoints {
/*
{
  "geocoder_status": "OK",
  "place_id": "ChIJ2W0o9d2w5zsRbZ48xiIvEIk",
  "types": [
    "establishment"
  ]
}
*/

  String? geocoderStatus;
  String? placeId;
  List<String?>? types;

  GetOfflineRoutesDataResultsInstructionsGeocodedWaypoints({
    this.geocoderStatus,
    this.placeId,
    this.types,
  });
  GetOfflineRoutesDataResultsInstructionsGeocodedWaypoints.fromJson(
      Map<String, dynamic> json) {
    geocoderStatus = json['geocoder_status']?.toString();
    placeId = json['place_id']?.toString();
    if (json['types'] != null) {
      final v = json['types'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      types = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['geocoder_status'] = geocoderStatus;
    data['place_id'] = placeId;
    if (types != null) {
      final v = types;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['types'] = arr0;
    }
    return data;
  }
}

class GetOfflineRoutesDataResultsInstructions {
/*
{
  "geocoded_waypoints": [
    {
      "geocoder_status": "OK",
      "place_id": "ChIJ2W0o9d2w5zsRbZ48xiIvEIk",
      "types": [
        "establishment"
      ]
    }
  ],
  "routes": [
    {
      "bounds": {
        "northeast": {
          "lat": 19.246059,
          "lng": 72.8612021
        },
        "southwest": {
          "lat": 19.2313543,
          "lng": 72.8544617
        }
      },
      "copyrights": "Map data ©2024",
      "legs": [
        {
          "distance": {
            "text": "1 m",
            "value": 0
          },
          "duration": {
            "text": "1 min",
            "value": 0
          },
          "end_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
          "end_location": {
            "lat": 19.2434515,
            "lng": 72.8588954
          },
          "start_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
          "start_location": {
            "lat": 19.2434557,
            "lng": 72.8588959
          },
          "steps": [
            {
              "distance": {
                "text": "1 m",
                "value": 0
              },
              "duration": {
                "text": "1 min",
                "value": 0
              },
              "end_location": {
                "lat": 19.2434515,
                "lng": 72.8588954
              },
              "html_instructions": "Head <b>south</b> on <b>Jaywant Sawant Marg</b>",
              "polyline": {
                "points": "snmtBcgu{L@?"
              },
              "start_location": {
                "lat": 19.2434557,
                "lng": 72.8588959
              },
              "travel_mode": "DRIVING"
            }
          ],
          "traffic_speed_entry": [
            null
          ],
          "via_waypoint": [
            null
          ]
        }
      ],
      "overview_polyline": {
        "points": "snmtBcgu{L~DTrGd@zHp@hJrAdBDhBLbKrAvD`@|D\\vEVt@Bb@@I\\GVMN_@ZqEbCk@ZFLq@^o@\\WRKF@HCPIJKBMAEAIMAG@OJODCSwEC}@Ae@FkAkC[y@GeC]kFo@cBK?l@GbAa@pB[xAEFSLKb@Ej@Cp@A^Dl@Hb@UB}CRkDPaANkBFaB@eCNI@AKXEvG]fDKzEWp@MGmA@u@JoAt@wDNcABs@CiAOgAWeAIWUYOAA?MA[Ke@KgCOKESMO]Ee@sALaA?QCs@IyAG}Ew@uAOs@EeCGmBIkAKe@Ii@QUI}FyCOKJOtDnBbAl@\\Lh@R`@FnAJ|@D"
      },
      "summary": "Jaywant Sawant Marg",
      "warnings": [
        null
      ],
      "waypoint_order": [
        0
      ]
    }
  ],
  "status": "OK"
}
*/

  List<GetOfflineRoutesDataResultsInstructionsGeocodedWaypoints?>?
      geocodedWaypoints;
  List<GetOfflineRoutesDataResultsInstructionsRoutes?>? routes;
  String? status;

  GetOfflineRoutesDataResultsInstructions({
    this.geocodedWaypoints,
    this.routes,
    this.status,
  });
  GetOfflineRoutesDataResultsInstructions.fromJson(Map<String, dynamic> json) {
    if (json['geocoded_waypoints'] != null) {
      final v = json['geocoded_waypoints'];
      final arr0 = <GetOfflineRoutesDataResultsInstructionsGeocodedWaypoints>[];
      v.forEach((v) {
        arr0.add(
            GetOfflineRoutesDataResultsInstructionsGeocodedWaypoints.fromJson(
                v));
      });
      geocodedWaypoints = arr0;
    }
    if (json['routes'] != null) {
      final v = json['routes'];
      final arr0 = <GetOfflineRoutesDataResultsInstructionsRoutes>[];
      v.forEach((v) {
        arr0.add(GetOfflineRoutesDataResultsInstructionsRoutes.fromJson(v));
      });
      routes = arr0;
    }
    status = json['status']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (geocodedWaypoints != null) {
      final v = geocodedWaypoints;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['geocoded_waypoints'] = arr0;
    }
    if (routes != null) {
      final v = routes;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['routes'] = arr0;
    }
    data['status'] = status;
    return data;
  }
}

class GetOfflineRoutesDataResults {
/*
{
  "_id": "675c15fc97f5c813f208b685",
  "user": "67484f559f5dbdc5c43809d6",
  "points": "smmtBsfu{L_BKmDIOfI~BZhBXvE|@hBFXDx@Xl@FGxBYvAIl@?^CV?h@Bf@\\CrAGzCMvDWrF[JOL_@Ac@HyARuAl@sCLq@BY@eAIwAU_AOk@U[UC]M[Ik@K_@AgAKSESMKOGOEw@lDYnAFbBNn@JbBZzBj@rCbAzC`AbCp@xBp@lAZFwC~BWlDo@QqBGwBHsBDo@FqCBkCCyBDSYqArUBN@f@Nl@CbCWb@KdEoAfAYpA[tEeA`HeB|EiAvAa@`GwAnCq@~Cs@~C{@bFiA~@WpBm@jEgAxBe@lAUbBUxAMnH@bAHrAN|@RdAVn@TjBv@hAj@vA|@dAv@pF`FnMjMn@XZHhDbDfA~@p@f@p@^p@X^JX[h@cALa@NHc@|@i@bAe@pAYp@Od@IZCn@D|B@pAKzDM|BIx@GVi@vCSGZmBPuATeDFgB@s@AgBq@Ag@DyB]I@EDAjAEJUTc@ZMHEF]hB",
  "instructions": [
    {
      "geocoded_waypoints": [
        {
          "geocoder_status": "OK",
          "place_id": "ChIJ2W0o9d2w5zsRbZ48xiIvEIk",
          "types": [
            "establishment"
          ]
        }
      ],
      "routes": [
        {
          "bounds": {
            "northeast": {
              "lat": 19.246059,
              "lng": 72.8612021
            },
            "southwest": {
              "lat": 19.2313543,
              "lng": 72.8544617
            }
          },
          "copyrights": "Map data ©2024",
          "legs": [
            {
              "distance": {
                "text": "1 m",
                "value": 0
              },
              "duration": {
                "text": "1 min",
                "value": 0
              },
              "end_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
              "end_location": {
                "lat": 19.2434515,
                "lng": 72.8588954
              },
              "start_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
              "start_location": {
                "lat": 19.2434557,
                "lng": 72.8588959
              },
              "steps": [
                {
                  "distance": {
                    "text": "1 m",
                    "value": 0
                  },
                  "duration": {
                    "text": "1 min",
                    "value": 0
                  },
                  "end_location": {
                    "lat": 19.2434515,
                    "lng": 72.8588954
                  },
                  "html_instructions": "Head <b>south</b> on <b>Jaywant Sawant Marg</b>",
                  "polyline": {
                    "points": "snmtBcgu{L@?"
                  },
                  "start_location": {
                    "lat": 19.2434557,
                    "lng": 72.8588959
                  },
                  "travel_mode": "DRIVING"
                }
              ],
              "traffic_speed_entry": [
                null
              ],
              "via_waypoint": [
                null
              ]
            }
          ],
          "overview_polyline": {
            "points": "snmtBcgu{L~DTrGd@zHp@hJrAdBDhBLbKrAvD`@|D\\vEVt@Bb@@I\\GVMN_@ZqEbCk@ZFLq@^o@\\WRKF@HCPIJKBMAEAIMAG@OJODCSwEC}@Ae@FkAkC[y@GeC]kFo@cBK?l@GbAa@pB[xAEFSLKb@Ej@Cp@A^Dl@Hb@UB}CRkDPaANkBFaB@eCNI@AKXEvG]fDKzEWp@MGmA@u@JoAt@wDNcABs@CiAOgAWeAIWUYOAA?MA[Ke@KgCOKESMO]Ee@sALaA?QCs@IyAG}Ew@uAOs@EeCGmBIkAKe@Ii@QUI}FyCOKJOtDnBbAl@\\Lh@R`@FnAJ|@D"
          },
          "summary": "Jaywant Sawant Marg",
          "warnings": [
            null
          ],
          "waypoint_order": [
            0
          ]
        }
      ],
      "status": "OK"
    }
  ],
  "time": 120,
  "distance": 5,
  "placeId": "smmtBsfu{L_BKmDIOfI~BZhBXvE|@hBFXDx@Xl@FGxBYvAIl@?^CV?h@Bf@\\CrAGzCMvDWrF[JOL_@Ac@HyARuAl@sCLq@BY@eAIwAU_AOk@U[UC]M",
  "type": "OFFLINE",
  "startName": "OFFLINE",
  "endName": "OFFLINE",
  "createdAt": "2024-12-13T11:09:48.409Z",
  "updatedAt": "2024-12-13T11:09:48.409Z",
  "__v": 0
}
*/

  String? Id;
  String? user;
  String? points;
  List<GetOfflineRoutesDataResultsInstructions?>? instructions;
  int? time;
  int? distance;
  String? placeId;
  String? type;
  String? startName;
  String? endName;
  String? createdAt;
  String? updatedAt;
  int? V;

  GetOfflineRoutesDataResults({
    this.Id,
    this.user,
    this.points,
    this.instructions,
    this.time,
    this.distance,
    this.placeId,
    this.type,
    this.startName,
    this.endName,
    this.createdAt,
    this.updatedAt,
    this.V,
  });
  GetOfflineRoutesDataResults.fromJson(Map<String, dynamic> json) {
    Id = json['_id']?.toString();
    user = json['user']?.toString();
    points = json['points']?.toString();
    if (json['instructions'] != null) {
      final v = json['instructions'];
      final arr0 = <GetOfflineRoutesDataResultsInstructions>[];
      v.forEach((v) {
        arr0.add(GetOfflineRoutesDataResultsInstructions.fromJson(v));
      });
      instructions = arr0;
    }
    time = json['time']?.toInt();
    distance = json['distance']?.toInt();
    placeId = json['placeId']?.toString();
    type = json['type']?.toString();
    startName = json['startName']?.toString();
    endName = json['endName']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    V = json['__v']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['_id'] = Id;
    data['user'] = user;
    data['points'] = points;
    if (instructions != null) {
      final v = instructions;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['instructions'] = arr0;
    }
    data['time'] = time;
    data['distance'] = distance;
    data['placeId'] = placeId;
    data['type'] = type;
    data['startName'] = startName;
    data['endName'] = endName;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['__v'] = V;
    return data;
  }
}

class GetOfflineRoutesData {
/*
{
  "page": 1,
  "limit": 10,
  "results": [
    {
      "_id": "675c15fc97f5c813f208b685",
      "user": "67484f559f5dbdc5c43809d6",
      "points": "smmtBsfu{L_BKmDIOfI~BZhBXvE|@hBFXDx@Xl@FGxBYvAIl@?^CV?h@Bf@\\CrAGzCMvDWrF[JOL_@Ac@HyARuAl@sCLq@BY@eAIwAU_AOk@U[UC]M[Ik@K_@AgAKSESMKOGOEw@lDYnAFbBNn@JbBZzBj@rCbAzC`AbCp@xBp@lAZFwC~BWlDo@QqBGwBHsBDo@FqCBkCCyBDSYqArUBN@f@Nl@CbCWb@KdEoAfAYpA[tEeA`HeB|EiAvAa@`GwAnCq@~Cs@~C{@bFiA~@WpBm@jEgAxBe@lAUbBUxAMnH@bAHrAN|@RdAVn@TjBv@hAj@vA|@dAv@pF`FnMjMn@XZHhDbDfA~@p@f@p@^p@X^JX[h@cALa@NHc@|@i@bAe@pAYp@Od@IZCn@D|B@pAKzDM|BIx@GVi@vCSGZmBPuATeDFgB@s@AgBq@Ag@DyB]I@EDAjAEJUTc@ZMHEF]hB",
      "instructions": [
        {
          "geocoded_waypoints": [
            {
              "geocoder_status": "OK",
              "place_id": "ChIJ2W0o9d2w5zsRbZ48xiIvEIk",
              "types": [
                "establishment"
              ]
            }
          ],
          "routes": [
            {
              "bounds": {
                "northeast": {
                  "lat": 19.246059,
                  "lng": 72.8612021
                },
                "southwest": {
                  "lat": 19.2313543,
                  "lng": 72.8544617
                }
              },
              "copyrights": "Map data ©2024",
              "legs": [
                {
                  "distance": {
                    "text": "1 m",
                    "value": 0
                  },
                  "duration": {
                    "text": "1 min",
                    "value": 0
                  },
                  "end_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
                  "end_location": {
                    "lat": 19.2434515,
                    "lng": 72.8588954
                  },
                  "start_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
                  "start_location": {
                    "lat": 19.2434557,
                    "lng": 72.8588959
                  },
                  "steps": [
                    {
                      "distance": {
                        "text": "1 m",
                        "value": 0
                      },
                      "duration": {
                        "text": "1 min",
                        "value": 0
                      },
                      "end_location": {
                        "lat": 19.2434515,
                        "lng": 72.8588954
                      },
                      "html_instructions": "Head <b>south</b> on <b>Jaywant Sawant Marg</b>",
                      "polyline": {
                        "points": "snmtBcgu{L@?"
                      },
                      "start_location": {
                        "lat": 19.2434557,
                        "lng": 72.8588959
                      },
                      "travel_mode": "DRIVING"
                    }
                  ],
                  "traffic_speed_entry": [
                    null
                  ],
                  "via_waypoint": [
                    null
                  ]
                }
              ],
              "overview_polyline": {
                "points": "snmtBcgu{L~DTrGd@zHp@hJrAdBDhBLbKrAvD`@|D\\vEVt@Bb@@I\\GVMN_@ZqEbCk@ZFLq@^o@\\WRKF@HCPIJKBMAEAIMAG@OJODCSwEC}@Ae@FkAkC[y@GeC]kFo@cBK?l@GbAa@pB[xAEFSLKb@Ej@Cp@A^Dl@Hb@UB}CRkDPaANkBFaB@eCNI@AKXEvG]fDKzEWp@MGmA@u@JoAt@wDNcABs@CiAOgAWeAIWUYOAA?MA[Ke@KgCOKESMO]Ee@sALaA?QCs@IyAG}Ew@uAOs@EeCGmBIkAKe@Ii@QUI}FyCOKJOtDnBbAl@\\Lh@R`@FnAJ|@D"
              },
              "summary": "Jaywant Sawant Marg",
              "warnings": [
                null
              ],
              "waypoint_order": [
                0
              ]
            }
          ],
          "status": "OK"
        }
      ],
      "time": 120,
      "distance": 5,
      "placeId": "smmtBsfu{L_BKmDIOfI~BZhBXvE|@hBFXDx@Xl@FGxBYvAIl@?^CV?h@Bf@\\CrAGzCMvDWrF[JOL_@Ac@HyARuAl@sCLq@BY@eAIwAU_AOk@U[UC]M",
      "type": "OFFLINE",
      "startName": "OFFLINE",
      "endName": "OFFLINE",
      "createdAt": "2024-12-13T11:09:48.409Z",
      "updatedAt": "2024-12-13T11:09:48.409Z",
      "__v": 0
    }
  ],
  "totalPages": 1,
  "totalResults": 5
}
*/

  int? page;
  int? limit;
  List<GetOfflineRoutesDataResults?>? results;
  int? totalPages;
  int? totalResults;

  GetOfflineRoutesData({
    this.page,
    this.limit,
    this.results,
    this.totalPages,
    this.totalResults,
  });
  GetOfflineRoutesData.fromJson(Map<String, dynamic> json) {
    page = json['page']?.toInt();
    limit = json['limit']?.toInt();
    if (json['results'] != null) {
      final v = json['results'];
      final arr0 = <GetOfflineRoutesDataResults>[];
      v.forEach((v) {
        arr0.add(GetOfflineRoutesDataResults.fromJson(v));
      });
      results = arr0;
    }
    totalPages = json['totalPages']?.toInt();
    totalResults = json['totalResults']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['page'] = page;
    data['limit'] = limit;
    if (results != null) {
      final v = results;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['results'] = arr0;
    }
    data['totalPages'] = totalPages;
    data['totalResults'] = totalResults;
    return data;
  }
}

class GetOfflineRoutes {
/*
{
  "data": {
    "page": 1,
    "limit": 10,
    "results": [
      {
        "_id": "675c15fc97f5c813f208b685",
        "user": "67484f559f5dbdc5c43809d6",
        "points": "smmtBsfu{L_BKmDIOfI~BZhBXvE|@hBFXDx@Xl@FGxBYvAIl@?^CV?h@Bf@\\CrAGzCMvDWrF[JOL_@Ac@HyARuAl@sCLq@BY@eAIwAU_AOk@U[UC]M[Ik@K_@AgAKSESMKOGOEw@lDYnAFbBNn@JbBZzBj@rCbAzC`AbCp@xBp@lAZFwC~BWlDo@QqBGwBHsBDo@FqCBkCCyBDSYqArUBN@f@Nl@CbCWb@KdEoAfAYpA[tEeA`HeB|EiAvAa@`GwAnCq@~Cs@~C{@bFiA~@WpBm@jEgAxBe@lAUbBUxAMnH@bAHrAN|@RdAVn@TjBv@hAj@vA|@dAv@pF`FnMjMn@XZHhDbDfA~@p@f@p@^p@X^JX[h@cALa@NHc@|@i@bAe@pAYp@Od@IZCn@D|B@pAKzDM|BIx@GVi@vCSGZmBPuATeDFgB@s@AgBq@Ag@DyB]I@EDAjAEJUTc@ZMHEF]hB",
        "instructions": [
          {
            "geocoded_waypoints": [
              {
                "geocoder_status": "OK",
                "place_id": "ChIJ2W0o9d2w5zsRbZ48xiIvEIk",
                "types": [
                  "establishment"
                ]
              }
            ],
            "routes": [
              {
                "bounds": {
                  "northeast": {
                    "lat": 19.246059,
                    "lng": 72.8612021
                  },
                  "southwest": {
                    "lat": 19.2313543,
                    "lng": 72.8544617
                  }
                },
                "copyrights": "Map data ©2024",
                "legs": [
                  {
                    "distance": {
                      "text": "1 m",
                      "value": 0
                    },
                    "duration": {
                      "text": "1 min",
                      "value": 0
                    },
                    "end_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
                    "end_location": {
                      "lat": 19.2434515,
                      "lng": 72.8588954
                    },
                    "start_address": "Gomant Nagar, Dahisar West, Leo Peter Wadi, Borivali West, Mumbai, Maharashtra 400068, India",
                    "start_location": {
                      "lat": 19.2434557,
                      "lng": 72.8588959
                    },
                    "steps": [
                      {
                        "distance": {
                          "text": "1 m",
                          "value": 0
                        },
                        "duration": {
                          "text": "1 min",
                          "value": 0
                        },
                        "end_location": {
                          "lat": 19.2434515,
                          "lng": 72.8588954
                        },
                        "html_instructions": "Head <b>south</b> on <b>Jaywant Sawant Marg</b>",
                        "polyline": {
                          "points": "snmtBcgu{L@?"
                        },
                        "start_location": {
                          "lat": 19.2434557,
                          "lng": 72.8588959
                        },
                        "travel_mode": "DRIVING"
                      }
                    ],
                    "traffic_speed_entry": [
                      null
                    ],
                    "via_waypoint": [
                      null
                    ]
                  }
                ],
                "overview_polyline": {
                  "points": "snmtBcgu{L~DTrGd@zHp@hJrAdBDhBLbKrAvD`@|D\\vEVt@Bb@@I\\GVMN_@ZqEbCk@ZFLq@^o@\\WRKF@HCPIJKBMAEAIMAG@OJODCSwEC}@Ae@FkAkC[y@GeC]kFo@cBK?l@GbAa@pB[xAEFSLKb@Ej@Cp@A^Dl@Hb@UB}CRkDPaANkBFaB@eCNI@AKXEvG]fDKzEWp@MGmA@u@JoAt@wDNcABs@CiAOgAWeAIWUYOAA?MA[Ke@KgCOKESMO]Ee@sALaA?QCs@IyAG}Ew@uAOs@EeCGmBIkAKe@Ii@QUI}FyCOKJOtDnBbAl@\\Lh@R`@FnAJ|@D"
                },
                "summary": "Jaywant Sawant Marg",
                "warnings": [
                  null
                ],
                "waypoint_order": [
                  0
                ]
              }
            ],
            "status": "OK"
          }
        ],
        "time": 120,
        "distance": 5,
        "placeId": "smmtBsfu{L_BKmDIOfI~BZhBXvE|@hBFXDx@Xl@FGxBYvAIl@?^CV?h@Bf@\\CrAGzCMvDWrF[JOL_@Ac@HyARuAl@sCLq@BY@eAIwAU_AOk@U[UC]M",
        "type": "OFFLINE",
        "startName": "OFFLINE",
        "endName": "OFFLINE",
        "createdAt": "2024-12-13T11:09:48.409Z",
        "updatedAt": "2024-12-13T11:09:48.409Z",
        "__v": 0
      }
    ],
    "totalPages": 1,
    "totalResults": 5
  }
}
*/

  GetOfflineRoutesData? data;

  GetOfflineRoutes({
    this.data,
  });
  GetOfflineRoutes.fromJson(Map<String, dynamic> json) {
    data = (json['data'] != null)
        ? GetOfflineRoutesData.fromJson(json['data'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (data != null) {
      data['data'] = this.data!.toJson();
    }
    return data;
  }
}
